{"version":3,"sources":["http-common.js","services/tutorial.service.js","components/add-tutorial.component.js","components/tutorial.component.js","components/tutorials-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddTutorial","props","handleInputChange","event","target","name","value","type","checked","setState","addTutorial","a","preventDefault","state","description","published","TutorialDataService","response","console","log","error","onSubmit","this","className","htmlFor","onChange","required","onClick","Component","Tutorial","getTutorial","editTutorial","update","match","params","disabled","TutorialsList","onChangeSearchTitle","bind","retrieveTutorials","refreshList","setActiveTutorial","removeAllTutorials","searchTitle","tutorials","currentTutorial","currentIndex","e","getAll","then","catch","tutorial","index","deleteAll","findByTitle","placeholder","map","key","to","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a2209595.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://tutorials2025pta.us-east-1.elasticbeanstalk.com/api/v1\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass TutorialDataService {\n  getAll() {\n    return http.get(\"/tutorials\");\n  }\n\n  get(id) {\n    return http.get(`/tutorials/${id}`);\n  }\n\n  create(data) {\n    return http.post(\"/tutorials\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/tutorials/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/tutorials/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/tutorials`);\n  }\n\n // findByTitle(title) {\n //   return http.get(`/tutorials?title=${title}`);\n // }\n findByTitle(title) {\n     return http.get(`/tutorials/title/${title}`);\n   }\n}\n\nexport default new TutorialDataService();","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\n\nexport default class AddTutorial extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            title: \"\",\n            description: \"\",\n            published: false\n        };\n    }\n\n    handleInputChange = (event) => {\n        const { name, value, type, checked } = event.target;\n        this.setState({\n            [name]: type === \"checkbox\" ? checked : value\n        });\n    };\n\n    addTutorial = async (event) => {\n        event.preventDefault();\n\n        const { title, description, published } = this.state;\n        const data = { title, description, published };\n\n        try {\n            const response = await TutorialDataService.create(data);\n            console.log(\"Tutorial creado:\", response.data);\n\n            this.setState({\n                title: \"\",\n                description: \"\",\n                published: false\n            });\n        } catch (error) {\n            console.error(\"Error al crear el tutorial:\", error);\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Add Tutorial</h2>\n                <form onSubmit={this.addTutorial}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"title\"\n                            name=\"title\"\n                            value={this.state.title}\n                            onChange={this.handleInputChange}\n                            required\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"description\"\n                            name=\"description\"\n                            value={this.state.description}\n                            onChange={this.handleInputChange}\n                            required\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"published\"\n                            name=\"published\"\n                            checked={this.state.published}\n                            onChange={this.handleInputChange}\n                        />\n                        <label htmlFor=\"published\">Published</label><br />\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-success\" onClick={this.addTutorial}>\n                            Submit\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\n\nexport default class Tutorial extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: this.props.match.params.id,\n            title: \"\",\n            description: \"\",\n            published: false\n        };\n    }\n\n    componentDidMount() {\n        this.getTutorial(this.state.id);\n    }\n\n    getTutorial = async (id) => {\n        try {\n            const response = await TutorialDataService.get(id);\n            const { title, description, published } = response.data;\n            this.setState({ title, description, published });\n        } catch (error) {\n            console.error(\"Error al obtener el tutorial:\", error);\n        }\n    };\n\n    handleInputChange = (event) => {\n        const { name, value, type, checked } = event.target;\n        this.setState({\n            [name]: type === \"checkbox\" ? checked : value\n        });\n    };\n\n    editTutorial = async (event) => {\n        event.preventDefault();\n\n        const { id, title, description, published } = this.state;\n        const data = { id, title, description, published };\n\n        try {\n            const response = await TutorialDataService.update(id, data);\n            console.log(\"Tutorial actualizado:\", response.data);\n        } catch (error) {\n            console.error(\"Error al actualizar el tutorial:\", error);\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <h2>Edit Tutorial</h2>\n                <form onSubmit={this.editTutorial}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"id\">ID</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"id\"\n                            name=\"id\"\n                            value={this.state.id}\n                            disabled\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"title\"\n                            name=\"title\"\n                            value={this.state.title}\n                            onChange={this.handleInputChange}\n                            required\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"description\"\n                            name=\"description\"\n                            value={this.state.description}\n                            onChange={this.handleInputChange}\n                            required\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"checkbox\"\n                            id=\"published\"\n                            name=\"published\"\n                            checked={this.state.published}\n                            onChange={this.handleInputChange}\n                        />\n                        <label htmlFor=\"published\">Published</label><br />\n                    </div>\n                    <div className=\"form-group\">\n                        <button type=\"submit\" className=\"btn btn-success\">\n                            Update\n                        </button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport TutorialDataService from \"../services/tutorial.service\";\nimport { Link } from \"react-router-dom\";\n\nexport default class TutorialsList extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\n    this.retrieveTutorials = this.retrieveTutorials.bind(this);\n    this.refreshList = this.refreshList.bind(this);\n    this.setActiveTutorial = this.setActiveTutorial.bind(this);\n    this.removeAllTutorials = this.removeAllTutorials.bind(this);\n    this.searchTitle = this.searchTitle.bind(this);\n    //Hacemos el bind de los métodos porque al usar estos métodos en gestores de eventos los componentes basados\n    //en clases pierden el ámbito.\n    this.state = {\n      tutorials: [], //lista de tutoriales\n      currentTutorial: null, //tutorial seleccionado de la lista\n      currentIndex: -1,\n      searchTitle: \"\"\n    };\n  }\n  //Cuando se carga el componente, se realiza la petición de tutoriales a la API\n  //El método retrieveTutorials provoca la actualización del estado, y por tanto la re-renderización del componente\n  componentDidMount() {\n    this.retrieveTutorials();\n  }\n\n  onChangeSearchTitle(e) {\n    const searchTitle = e.target.value;\n\n    this.setState({\n      searchTitle: searchTitle\n    });\n  }\n\n  retrieveTutorials() {\n    TutorialDataService.getAll()\n      .then(response => {\n        this.setState({\n          tutorials: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  refreshList() {\n    this.retrieveTutorials();\n    this.setState({\n      currentTutorial: null,\n      currentIndex: -1\n    });\n  }\n\n  setActiveTutorial(tutorial, index) {\n    this.setState({\n      currentTutorial: tutorial,\n      currentIndex: index\n    });\n  }\n\n  removeAllTutorials() {\n    TutorialDataService.deleteAll()\n      .then(response => {\n        console.log(response.data);\n        this.refreshList();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  searchTitle() {\n    TutorialDataService.findByTitle(this.state.searchTitle)\n      .then(response => {\n        this.setState({\n          tutorials: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { searchTitle, tutorials, currentTutorial, currentIndex } = this.state;\n    //ponemos los distintos elementos del estado en variables para simplificar su acceso dentro del método\n    return (\n      <div className=\"list row\">\n        <div className=\"col-md-8\">\n          <div className=\"input-group mb-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Search by title\"\n              value={searchTitle}\n              onChange={this.onChangeSearchTitle}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                onClick={this.searchTitle}\n              >\n                Search\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-6\">\n          <h4>Tutorials List</h4>\n\n          <ul className=\"list-group\">\n            {/*El operedor && lógico. Los dos elementos tienen que ser true, en este caso no vacio, para que se ejecute la sentencia */}\n            {/*si tutorials está vacio , no se ejecuta el map*/}\n\n            {tutorials &&\n              tutorials.map((tutorial, index) => (\n                <li\n              /* Cambiamos la clase del elemento de la lista seleccionado. Ponemos fondo azul*/\n                  className={\n                    \"list-group-item \" +\n                    (index === currentIndex ? \"active\" : \"\")\n                  }\n                  onClick={() => this.setActiveTutorial(tutorial, index)}\n                  key={index}\n                >\n                  {tutorial.title}\n                </li>\n              ))}\n          </ul>\n\n          <button\n            className=\"m-3 btn btn-sm btn-danger\"\n            onClick={this.removeAllTutorials}\n          >\n            Remove All\n          </button>\n        </div>\n        <div className=\"col-md-6\">\n          {/*Renderizado condicional. Si current tutorial el null se dibuja lo de abajo. Si no,*/}\n          {/*se dibuja \"Please click on a Tutorial...\" ver más abajo.*/}\n          {currentTutorial ? (\n            <div>\n              <h4>Tutorial</h4>\n              <div>\n                <label>\n                  <strong>Title:</strong>\n                </label>{\" \"}\n                {currentTutorial.title}\n              </div>\n              <div>\n                <label>\n                  <strong>Description:</strong>\n                </label>{\" \"}\n                {currentTutorial.description}\n              </div>\n              <div>\n                <label>\n                  <strong>Status:</strong>\n                </label>{\" \"}\n                {/* renderizado condicional */}\n                {currentTutorial.published ? \"Published\" : \"Pending\"}\n              </div>\n\n              <Link\n                //Como hemos incluido en el switch esta ruta, /tutorials/+id se renderizará el componente\n                // tutorials cuando se pulse el enlace.\n                to={\"/tutorials/\" + currentTutorial.id}\n                className=\"badge badge-warning\"\n              >\n                Edit\n              </Link>\n            </div>\n          ) : (\n            <div>\n              <br />\n              <p>Please click on a Tutorial...</p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddTutorial from \"./components/add-tutorial.component\";\n//Componente para editar componente\nimport Tutorial from \"./components/tutorial.component\";\nimport TutorialsList from \"./components/tutorials-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <Link to={\"/tutorials\"} className=\"navbar-brand\">\n            Tutoriales\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/tutorials\"} className=\"nav-link\">\n                Tutorials\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            {/*El en switch se renderizarán todas los compoentes cuta URL coicidan con la activa*/}\n            <Route exact path={[\"/\", \"/tutorials\"]} component={TutorialsList} />\n            <Route exact path=\"/add\" component={AddTutorial} />\n            <Route path=\"/tutorials/:id\" component={Tutorial} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  /* BrowerRouter\n     Forma de parte de la librería react-router .Es una envoltura\n     para nuestra aplicación. Esta envoltura nos da acceso al API\n     de historia de HTML5 para mantener nuestra interfaz\n     gráfica en sincronía con la locación actual o URL.*/\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}